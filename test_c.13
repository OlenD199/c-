//创建函数，使用递归，输入1234，然后打印出4 3 2 1和1 2 3 4
/*
	递归的条件：
		1.存在限制条件
		2.每次递归之后越来越接近这个限制条件
*/

//#include <stdio.h>
//
////输入1234，然后打印出4 3 2 1和1 2 3 4
//void Print_1(int n)
//{
//	if (n != 0)
//	{
//		printf("%d ", n % 10);
//		n = n / 10;
//		Print_1(n);
//	}
//}
//
//void Print_2(int n)
//{
//	if (n > 9)
//	{
//		Print_2(n / 10);
//	}
//	printf("%d ", n % 10);
//}
//
//int main()
//{
//	int num;
//	scanf("%d", &num);
//	//递归
//	Print_1(num);
//	printf("\n");
//	Print_2(num);
//
//	return 0;
//}

//#include <stdio.h>
//编写函数不允许创建临时变量，求字符串长度
// 
// 
//int my_strlen(char* str)//函数传过来的是数组首元素地址，字符串地址用char* 来接受
//{
//	int count = 0;
//	while (*str != '\0')
//	{
//		count++;
//		str++;
//	}
//
//	return count;
//}

////使用递归，可以不用创建临时变量
//int my_strlen(char* str)
//{
//	if (*str != '\0')
//		return 1 + my_strlen(str + 1);
//	else
//		return 0;
//}
//
//int main()
//{
//	char arr[] = "hello world!";
//	int len = my_strlen(arr);//自定义函数传入的是arr这个数组的首元素地址，
//	printf("len = %d\n", len);
//	return 0;
//}

//#include <stdio.h>
////求n的阶乘
////方法一：
//int  Factorial_1(int n)
//{
//	int sum = 1;
//	for (int i = 1; i <= n; i++)
//	{
//		sum = sum * i;
//	}
//	return sum;
//}
////方法二:(递归与迭代)
//int Factorial_2(int n)
//{
//	int sum = 1;
//	if (n != 1)
//		return n * Factorial_2(n - 1);
//	else 
//		return 1;
//}
//
//int main()
//{
//	int num;
//	scanf("%d", &num);
//	int ret = Factorial_1(num);
//	printf("ret = %d\n", ret);
//	ret = Factorial_2(num);
//	printf("ret = %d\n", ret);
//
//	return 0;
//}

////使用函数递归描述第n个斐波那契额数列的值（不考虑溢出，n的值不能太大）
////1 1 2 3 5 8 . . . 
//#include <stdio.h>
//
//int Fib(int n)
//{
//	if (n <= 2)
//		return 1;
//	else
//		return Fib(n - 1) + Fib(n - 2);
//}
//int main()
//{
//	int n = 0;
//	int ret = 0;
//	scanf("%d", &n);
//	ret = Fib(n);
//	printf("ret = %d\n", ret);
//	return 0;
//}

////斐波那契数列（不使用递归）
//#include <stdio.h>
//
//int Fib(int n)
//{
//	int a = 1;
//	int b = 1;
//	int c = 1;
//	while (n > 2)
//	{
//		c = a + b;
//		a = b;
//		b = c;
//		n--;
//	}
//	return c;
//}
//
//int main()
//{
//	int n = 0;
//	int ret = 0;
//	scanf("%d", &n);
//	ret = Fib(n);
//	printf("ret = %d\n", ret);
//	return 0;
//}

//汉诺塔问题
#include <stdio.h>

void hannoi(int n, char x, char y, char z)
{
	void move(char, int, char);
	if (n == 1)
	{
		move(x, 1, z);
	}
	else
	{
		hannoi(n - 1, x, y, z);
		move(x, n, z);
		hannoi(n - 1, y, x, z);
	}
}
void move(char getone, int n, char putone)
{
	static int k = 1;
	printf("%2d:%3d # %c---%c\n", k, n, getone, putone);
	if (k++ % 3 == 0)
		printf("\n");
}
int main()
{
	void hanoi(int, char, char, char);
	int n;
	printf("Input the number of diskes:\t");
	scanf("%d", &n);
	hannoi(n,'A','B','C');

	return 0;
}
