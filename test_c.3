#include<stdio.h>
#include<string.h>

void test1()//转移字符
{
	//printf("c:\test\32\test.c");
	//printf("\n");
	//printf("c:\\test\\32\\test.c");//  两个斜杠\\ 用来表示反斜杠，防止它被解释为一个转义序列符
	printf("%c\n",'\'');//  \' 用于表示单引号'，会输出  ' , 它表示出字符常量，所以用%c
	printf("%s\n", "\"");//  \" 用于表示双引号", 会输出  " ，他表示字符串内部的双引号，所以用%s

}

void test2()
{
	printf("%d\n", strlen("c:\test\32\test.c"));// 13,\t算一个字符，\32也算一个字符，一共十三个字符
	// \ddd 后面的ddd表示1到3位八进制，\ddd整体表示将这个八进制转化成十进制后，该十进制数所代表的ascii码值
	// 比如\32 ： 32为八进制数，转换为十进制数为26，即表示26所代表的ascii码值
	printf("%c   ", 26);
	printf("%c\n", '\32');

	printf("%c   ",90 );
	printf("%c\n", '\132');

	// \xdd : x表示16进制，dd表示16进制的数字，\xdd 表示将dd这一16进制的数字转化为10进制，该10进制数所代表的ascii码值
	printf("%c   ", 97);
	printf("%c\n", '\x61');


}

void test3()
{
	// <<  >>  表示移位操作符（二进制位）
	int a = 1;
	int b = a << 1;
	// int类型a 占据了32个bit位，二进制表示位 00000000000000000000000000000001
	// <<表示向左移，b表示a向左移1位，左边的0舍弃，右边补上0，变为 00000000000000000000000000000010  转化为十进制为2
	int c = a << 2;
	//b表示a向左移2位，左边的0舍弃，右边补上0，变为 00000000000000000000000000000100 转化为十进制为4
	printf("%d\n", a); // 移位后a的值不变
	printf("%d\n", b);
	printf("%d\n", c);

}

void test4()
{
	//(2进制)位操作
	//& 按位与
	int a = 3;//2进制为011
	int b = 5;//2进制为101
	int c = a & b;
	//&相当于 并，二进制两个都为一时为1，否则为0， 则c = 001,10进制为1
	printf("%d\n", c);
	// | 按位或
	int d = 3;//2进制为011
	int e = 5;//2进制为101
	int f = a | b;
	//&相当于 或，二进制两个都为0时为0，否则为1， 则c = 111,10进制为7
	printf("%d\n", f);
	// ^  按位异或
	int h = 3;//2进制为011
	int i = 5;//2进制为101
	int j = a ^ b;
	//^，二进制两个相同时为0，相异时为1 则c = 110,10进制为6
	printf("%d\n", j);

}

int main()
{
	test1();
	test2();
	test3();
	test4();
	return 0;
}
