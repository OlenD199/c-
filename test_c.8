#include<stdio.h>
//3.在一个有序数组中查找具体的某个数字n。编写 int binsearch（int x， int v［］ int n）功能:
//在v［0］＜＝v［1］＜＝v［2］＜ = …＜＝v［n - 1］的数组中查找x

int binsearch(int x, int v[], int n)
{
	int i = 0;
	int d = 0;
	int count = 0;
	while (1)
	{
		printf("请输入数组的坐标：");
		scanf("%d", &count);
		if (*(v + count) == n)
			break;
		else if (*(v + count) > n)
		{
			printf("有点大\n");
			continue;
		}
		else 
		{
			printf("有点小\n");
			continue;
		}
	}

	return count;

}


int main()
{
	int arr[] = {1,2,3,5,8,9,11,15,49,100};
	int sz = sizeof(arr) / sizeof(arr[0]);
	int n;
	printf("请输入数字：");
	scanf("%d", &n);
	int ret = binsearch(sz, arr, n);
	printf("找到了，下标为：%d\n", ret);
	return 0;

}

//------------------------------------------------------------------------------

//4.编写代码，演示多个字符从两端移动，向中间汇聚。(方法1)
#include <stdio.h>
#include <string.h>

int main()
{
	char str[] = "welcome to world!!!";
	int sz = strlen(str);
	int j = 0;
	for (int i = 0; i < sz / 2; i++)
	{
		int d = 0;
		for (j = 0; j < i + 1; j++)
		{
			printf("%c", str[j]);
		}
		for (j = 0; j < sz - (i + 1) * 2; j++)
		{
			printf("#");
			d++;
		}
		for (j = 1 + i + d; j < sz; j++)
		{
			printf("%c", str[j]);
		}
		printf("\n");
	}
	puts(str);
	return 0;
}


//------------------------------------------------------------------------------

//4.编写代码，演示多个字符从两端移动，向中间汇聚。(方法2)
#include <stdio.h>
#include <string.h>
#include <windows.h>

int main()
{
	char str1[] = "welcome to world";
	int sz = strlen(str1);//也可以用sizeof(str1)/sozeof(str1[0])-2 来计算
						//一般定义时定义为 char str1[]={'w','e','l' ... 'd'}; 推荐使用sizeof计算str1的长度
	int i = 0;
	char str2[50] = { 0 };
	for (i = 0; i < sz; i++)
	{
		str2[i] = '#';
	}
	int left = 0;
	int right = sz - 1;
	for (i = 0; i < sz/2; i++, left++, right--)
	{
		if (left >= right)
		{
			break;
		}
		str2[left] = str1[left];
		str2[right] = str1[right];
		puts(str2);
		Sleep(500);//Sleep函数表示停留，1000毫秒为一秒，所以会停留一秒
	}

	return 0;
}

//------------------------------------------------------------------------------

#include <stdio.h>
#include <string.h>
int main()
{
	char str[] = { 'w','e','l','c','o','m','e' };
	int sz = strlen(str);
	int sz1 = sizeof(str) / sizeof(str[0]);
	//一般定义时定义为 char str1[]={'w','e','l' ... 'd'}; 推荐使用sizeof计算字符数组的长度
	printf("%d %d", sz, sz1);
	return 0;
}


//------------------------------------------------------------------------------
//5.编写代码实现，模拟用户登录情景，并且只能登录三次。
//（只允许输入三次密码，如果密码正确则提示登录成，如果三次均输入错误，则退出程序。)

#include <stdio.h>
#include <string.h>
int main()
{
	char password[20] = { 0 };
	int i = 0;
	for (i = 0; i < 3; i++)
	{
		printf("请输入密码：>");
		scanf("%s", password);
		if (strcmp(password, "123456") == 0)
		{
			printf("密码输入正确\n");
			break;
		}
		else
		{
			printf("输入错误\n");
		}
	}
	if (i == 3)
	{
		printf("用户登陆失败\n");
	}

	return 0;
}
